// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;
    

    /** Initializes the library. */
    function void init() {
        var Array a;
        let a = Array.new(3);
        let a[2] = 222;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;

    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if ( x < 0 ) {
            return -x;
        } else {
            return x;
        }
    }
    
    /** Returns 1 if the i-th bit of x is 1 and 0 otherwise.
     *  This function is used to find out if the i-th bit of a 16-bit 
     *  integer is 1 or 0.
     */ 
    function int bit(int x, int index) {
        return ~( ( x & twoToThe[index] ) = 0 );
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedx, i;
        let sum = 0;
        let shiftedx = x;
        let i = 0;
        while ( i < 16 ) {
            if ( Math.bit( y, i ) = 1 ) {
                let sum = sum + shiftedx;
            }
            let shiftedx = shiftedx + shiftedx;
            let i = i + 1;
        }
        return sum;
    }


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        if ( y > x ) { return 0; }
        let q =  x / ( y + y );
        if (( x - ( 2 * q * y ) ) < y ) {
            return q + q;
        } else {
            return q + q + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, tmp;
        let y = 0;
        // Setting j = n / 2 - 1 where n = 16
        let j = 7;
        while ( j > 0 | j = 0 ) {
            let tmp = ( y + twoToThe[j] ) * ( y + twoToThe[j] );
            if ( tmp < x | tmp = x ) {
                let y = y + twoToThe[j];
            }
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if ( a < b ) {
            return b;
        } 
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if ( b < a ) {
            return b;
        }
        return a;
    }
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // C-Instructions: 1xxaccccccdddjjj
    //                 fedcba9876543210

    And(a = instruction[15], b = instruction[3], out = writeM); 

// Mux deciding whether to load instruction or the ALU output into the A register 
    And(a = instruction[15], b = instruction[5], out = selInsALU);
    Mux16(a = instruction, b = ALUoutput, sel = selInsALU, out = toARegister);

// Mux to decide whether to use A or M register
    Mux16(a = ARegister, b = inM, sel = instruction[12] , out = toALU);
    
// The A register
    Not(in = instruction[15], out = notMSB);
    And(a = instruction[5], b = instruction[15], out = WriteALUOut);
    Or(a = WriteALUOut, b = notMSB, out = writeA);
    Register(in = toARegister, load = writeA, out = ARegister, out[0..14]=addressM);

// The D register
    And(a = instruction[4], b = instruction[15], out = WriteD);
    Register(in = ALUoutput, load = WriteD, out = DRegister);

// Implementing the Program Counter with logic on whether to jump or not

    // Creating greater than from ng
    Not(in = ng, out = gt);
    
    // Creating a one constant to default the PC to increment
    Not(in = instruction[0], out = notJ1);
    Xor(a = instruction[0], b = notJ1, out = oneConst);

    // Creating logic for whether to jump
        // >= 0
        And(a = gt, b = instruction[0], out = loadgtpart1);
        // deriving > 0 from >= 0 && != 0
        Not(in = zr, out = notzr);
        And(a = loadgtpart1, b = notzr, out = loadgtpart2);
        And(a = instruction[15], b = loadgtpart2, out = loadgt);
        // == 0 jump
        And(a = zr, b = instruction[1], out = loadeqpart1);
        And(a = instruction[15], b = loadeqpart1, out = loadeq);
        // < 0
        And(a = ng, b = instruction[2], out = loadltpart1);
        And(a = instruction[15], b = loadltpart1, out = loadlt);
        // Or-ing the results together
        Or(a = loadgt, b = loadeq,    out = loadpart1);
        Or(a = loadlt, b = loadpart1, out = load);

    PC(in = ARegister, load = load, inc = oneConst, reset = reset, out[0..14] = pc);

// ALU Implementation
    ALU(x   = DRegister,            y  = toALU,          zx  = instruction[11], 
        nx  = instruction[10], zy = instruction[9], ny  = instruction[8], 
        f   = instruction[7],  no = instruction[6], out = ALUoutput, 
        out = outM,            zr = zr,             ng  = ng);
}
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array memory;
    static Array freeList;
    static Array memoryBottom;
    
    static int heapBottom;   // 16384
    static int heapBase;     // 2048
    static int LENGTH;       //the segment's length
    static int NEXT;         //pointer to the next segment in the list
    static int ALLOC_LENGTH; //the alloc block's length


    /** Initializes the class. */
    function void init() {
        let heapBase = 2048;
        let heapBottom = 16384;
        let memory = 0;
        let freeList = heapBase;
        let LENGTH = 0;
        let NEXT = 1;
        let freeList[LENGTH] = heapBottom - heapBase;
        let freeList[NEXT] = null; 
        let ALLOC_LENGTH = -1;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    function Array bestFit(int size) {
        var Array curBlock, bestBlock;
        var int bestSize, curSize;

        let bestBlock = null;
        let bestSize = heapBottom - heapBase;
        let curBlock = freeList;

        if(curBlock[NEXT] = null){
            return curBlock;
        }
        
        while ( ~(curBlock = null) ) {
            let curSize = curBlock[LENGTH]-1;  
            if ( ~(curSize < size) & (curSize < bestSize) ) {
                let bestBlock = curBlock;    
                let bestSize = curBlock;
            }
            let curBlock = curBlock[NEXT];
        }
        return bestBlock; 
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array memBlock, nextBlock, result;

        let memBlock = Memory.bestFit(size);
        let result = memBlock + 1;

        if ( ~( memBlock = null ) ) {
            if( memBlock[LENGTH] > ( size + 1 + 2 ) ) { 
                let nextBlock = memBlock + size + 1; 
                let nextBlock[NEXT] = memBlock[NEXT];
                let nextBlock[LENGTH] = memBlock[LENGTH] - (size - 1);
                let result[ALLOC_LENGTH] = size + 1; 
                let freeList = nextBlock;
            } else {
                let nextBlock = memBlock[NEXT];   
                let result[ALLOC_LENGTH] = memBlock[LENGTH];
            }
            let memBlock = nextBlock;
        } 

        return result;
    }   

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array preBlock, nextBlock;
        var int size;

        let size = o[ALLOC_LENGTH];
        let o = o - 1;

        if ( freeList > o ){
            let preBlock = null;
        }

        let preBlock = freeList;
        while( ~( preBlock[NEXT] = null ) & ( preBlock[NEXT] < o) ){
            let preBlock = preBlock[NEXT];
        }

        if ( preBlock = null ) {
            let o[LENGTH] = size;
            let o[NEXT] = freeList;
            let freeList = o;
            let preBlock = o;
        } else {
            if ( ( preBlock + preBlock[LENGTH]) = o ){
                let preBlock[LENGTH] = preBlock[LENGTH] + size;
            } else {
                let o[LENGTH] = size;
                let o[NEXT] = preBlock[NEXT];
                let preBlock[NEXT] = o;
                let preBlock = o;
            }
        }

        // Check if you can join the next block
        if((preBlock + preBlock[LENGTH]) = preBlock[NEXT]){
            let nextBlock = preBlock[NEXT];
            let preBlock[LENGTH] = preBlock[LENGTH] + nextBlock[LENGTH];
            let preBlock[NEXT] = nextBlock[NEXT];
        }
        return;
    }    
}
